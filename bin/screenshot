#!/usr/bin/env ruby

require "rubygems"
require "bundler/setup"
require "fog"
require "webrick"
require "diff_dirs"
require "selenium-webdriver"
require "github_api"

class Nil
  def blank?
    true
  end
end

class String
  def blank?
    self.strip == ""
  end
end

commit_range = ENV["TRAVIS_COMMIT_RANGE"]
commit_range = "master...#{ENV["TRAVIS_COMMIT"]}" if commit_range.nil? || commit_range.blank?
old_commit = commit_range.split("...").first
if commit_range.blank?
  puts "No commit range found. Exiting..."
  exit 1
end

pull_request_number = ENV["TRAVIS_PULL_REQUEST"]
if pull_request_number.nil? || pull_request_number.blank?
  puts "Not testing a pull request. Exiting..."
  exit 0
else
  pull_request_number = pull_request_number.to_i
end

puts "Screenshotting files changed between #{commit_range}"

storage = Fog::Storage.new({
  aws_access_key_id: ENV["AWS_ACCESS_KEY_ID"],
  aws_secret_access_key: ENV["AWS_SECRET_ACCESS_KEY"],
  provider: "AWS"
})

bucket = storage.directories.create(
  key:    "com.xively.travis_ci",
  public: false
)

def upload(bucket, commit_range, file_path)
  bucket.files.create(
    key: "sloth/#{commit_range}/#{file_path}",
    body: File.open(file_path),
    public: true
  ).public_url
end

def find_free_port()
  server = TCPServer.new('127.0.0.1', 0)
  port = server.addr[1]
  server.close
  port
end

def with_static_server(path, &block)
  port = find_free_port
  server = WEBrick::HTTPServer.new :Port => port
  server.mount "/", WEBrick::HTTPServlet::FileHandler, path
  Thread.new { server.start }

  block.call(port)

ensure
  server.stop
end

def url(port, path)
  ["http://127.0.0.1:#{port}", path].join('/')
end

def pages_changed_since_commit(old_commit)
  Dir.mktmpdir("sloth_screenshots") do |tmp|
    current_dir = Dir.pwd
    basename = File.basename(current_dir)

    FileUtils.cp_r current_dir, tmp, :verbose => true

    puts "cd #{tmp}/#{basename} && git reset -q --hard HEAD && git checkout -q #{old_commit} && ./bin/build"
    `cd #{tmp}/#{basename} && git reset -q --hard HEAD && git checkout -q #{old_commit} && ./bin/build`

    diff_dirs("#{tmp}/#{basename}/_site", "_site").map(&:last).grep(/.html$/)
  end
end

def output_file(path)
  full_path = ["screenshots", path].join(File::SEPARATOR) + ".png"
  full_dir = File.dirname(full_path)
  FileUtils.mkdir_p(full_dir) unless File.exists?(full_dir)
  full_path
end

screenshot_urls = []
with_static_server("#{Dir.pwd}/_site") do |port|
  driver = Selenium::WebDriver.for :firefox
  driver.manage.window.resize_to(1024, 768)

  pages = pages_changed_since_commit(old_commit)
  puts "\nFound #{pages.count} differing pages to screenshot"
  pages.each do |page|
    puts "\nScreenshotting #{page}..."
    png_path = output_file(page)
    driver.navigate.to url(port, page)
    driver.save_screenshot png_path
    screenshot_urls << [page, upload(bucket, commit_range, png_path)]
  end

  driver.quit
end

def comment_body(screenshot_urls)
  return "No pages have changed" if screenshot_urls.empty?

  "Files changed:\n" + (screenshot_urls.map { |page_name, screenshot_url|
    "[#{page_name}](#{screenshot_url})"
  }.join("\n"))
end

github = Github.new oauth_token: ENV["GITHUB_OAUTH_TOKEN"]
github.issues.comments.create user: "xively",
                              repo: "sloth",
                              issue_id: pull_request_number,
                              body: comment_body(screenshot_urls)
